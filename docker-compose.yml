services:
  dbprod:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - ./contData:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: azerty
      PGDATA: /var/lib/postgresql/data/pgdata
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 5s
      timeout: 5s
      retries: 10

  adminer:
    image: adminer
    restart: always
    ports:
      - 8081:8080
    depends_on:
      dbprod:
        condition: service_healthy

  back:
    build: ./back/back
    ports:
      - 5050:5050
    command: [sh, -cx, 'npm run build && npm run start']
    volumes:
      - ./back/back/src/views:/app/build/views
    environment:
      - DB=dbprod
    env_file:
      - ./back/back/.env
    depends_on:
      dbprod:
        condition: service_healthy
    healthcheck:
      test: 'curl --fail --request POST --header ''content-type: application/json'' --url ''http://localhost:5050'' --data ''{"query":"query { __typename }"}'' || exit 1'
      interval: 2s
      timeout: 10s
      retries: 5
      start_period: 2s

  front:
    build: ./front/frontweb
    environment:
      - REACT_APP_DB=dbprod
    env_file:
      - ./front/frontweb/.env
    ports:
      - 3000:3000
    depends_on:
      back:
        condition: service_healthy
    command:
      [
        sh,
        -cx,
        'npm run build --production && npm install -g serve && serve -s build',
      ]
